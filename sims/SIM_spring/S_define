//
// Trick spring sim
// 
// Credit: Tim Briscoe (timothy.j.briscoe@nasa.gov)
// 

#include "sim_objects/default_trick_sys.sm"

##include <math.h>
##include "trick/integrator_c_intf.h"

class SpringSimObject : public Trick::SimObject {

    public:

        double m;  // kg  mass
        double k;  // N/m stiffness
        double c;  // N*s/m damping
        double z;  // -- zeta
        double w;  // rad/s omega
        double init_pos;  // m
        double init_vel;  // m/s

        double pos;       // m
        double vel;       // m/s
        double acc;       // m/s2
        double force;     // N

        double analytic_pos; // m
        double analytic_vel; // m/s
        double analytic_acc; // m/s2

        SpringSimObject() : 
            m(1.0), k(39.47842), z(0.1),
            init_pos(0), init_vel(0.1),
            pos(0), vel(0), acc(0)
        {
            ("initialization") spring_init();
            ("derivative") spring_deriv();
            ("integration") trick_ret = spring_integ();
        }

        int spring_init()
        {
            pos = init_pos;
            vel = init_vel;
            w = sqrt(k/m);
            c = 2*z*w*m;
            return 0;
        }

        int spring_deriv()
        {
            force = -(k*pos + c*vel);
            acc = force/m ;

            double W = w*sqrt(1-z*z);
            double A = init_pos;
            double B = (init_vel + z*w*init_pos)/W;
            double t = exec_get_sim_time(); 
            analytic_pos = exp(-z*w*t)*(A*cos(W*t) + B*sin(W*t));
            analytic_vel = exp(-z*w*t)*((B*W-A*z*w)*cos(W*t) + 
                                        (-B*z*w-A*W)*sin(W*t));
            analytic_acc = -2.0*z*w*analytic_vel - w*w*analytic_pos;


            return 0;
        }

        int spring_integ()         
        {
            int ipass;
            load_state(&pos,&vel,NULL);
            load_deriv(&vel,&acc,NULL);
            ipass = integrate();
            unload_state(&pos,&vel,NULL);
            return( ipass );
        }
} ;

SpringSimObject spring ;

integrate integ_loop (0.001) spring;

void create_connections() {
    integ_loop.getIntegrator( Runge_Kutta_4, 2);
}
